import logging
import sqlalchemy
from telegram import LabeledPrice, Update
from telegram.ext import (Application, MessageHandler, filters, CommandHandler, ConversationHandler,
                          PreCheckoutQueryHandler)
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from data import db_session
from data.infos import Info

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)
BOT_TOKEN = '6718278003:AAEn1cxM9iKStowSOxMXekv4mrjpl_Dr3YA'
SHOP_TOKEN = '1744374395:TEST:d28241bde3387bace73e'


async def start(update, context):
    markup = ReplyKeyboardMarkup([['üè™ –ë–æ—Ç-–º–∞–≥–∞–∑–∏–Ω', 'üñ• –ë–æ—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫'], ['üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫']],
                                 resize_keyboard=True)
    if update.message.chat_id == 5131259861:
        markup = ReplyKeyboardMarkup([['üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏'], ['‚òùÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ']],
                                     resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text('–ù–∞—á–Ω—ë–º —Ä–∞–±–æ—Ç—É!', reply_markup=markup)
        return 'show_all_works'
    await update.message.reply_text(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "–ß–µ—Ä–µ–∑ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞ :)\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å "
        "—Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞.\n"
        "üÜò –ü–æ–º–æ—â—å: /help\n"
        "‚ùå –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è: /stop", reply_markup=markup
    )
    return 'choice'


async def choice(update, context):
    chat_id = update.message.chat_id
    markup = ReplyKeyboardMarkup([['üëå –î–∞!'], ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
                                 one_time_keyboard=True, resize_keyboard=True)
    answer = update.message.text
    if answer == '–°—Ç–æ–ø':
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
                                        "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END
    elif answer == 'üè™ –ë–æ—Ç-–º–∞–≥–∞–∑–∏–Ω':
        await update.message.reply_text('üëå –•–æ—Ä–æ—à–æ!\n'
                                        '–° –ø–æ–º–æ—â—å—é —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã, '
                                        '–∞ –∫–ª–∏–µ–Ω—Ç —Å–º–æ–∂–µ—Ç –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –∏—Ö –≤ —Å–∞–º–æ–º –±–æ—Ç–µ!\n'
                                        '–¶–µ–Ω–∞ –±–æ—Ç–∞: 800 —Ä—É–±–ª–µ–π\n'
                                        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
                                        , reply_markup=markup)
        context.user_data['variant'] = '–º–∞–≥–∞–∑–∏–Ω'

        return 'payment'
    elif answer == 'üñ• –ë–æ—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫':
        await update.message.reply_text('üëç –û—Ç–ª–∏—á–Ω–æ!\n'
                                        '–ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–∫–æ–º—É –±–æ—Ç—É –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–ø—Ä–∏–º–µ—Ä, '
                                        '–±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏–ª–∏ –±–æ—Ç, —É–º–µ—é—â–∏–π –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å '
                                        '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã.\n'
                                        '–¶–µ–Ω–∞ –±–æ—Ç–∞: 500 —Ä—É–±–ª–µ–π\n'
                                        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
                                        reply_markup=markup)
        context.user_data['variant'] = '–æ–±—Ä–∞–±–æ—Ç—á–∏–∫'
        return 'payment'
    elif answer == 'üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫':
        db_sess = db_session.create_session()
        for work in db_sess.query(Info).filter(Info.user_id == chat_id).all():
            work_id = f"–ó–∞—è–≤–∫–∞ ‚Ññ{work.id}\n"
            description = work.description
            status = f"–°—Ç–∞—Ç—É—Å: {work.status}"
            await context.bot.send_message(chat_id=chat_id, text=f"{work_id}{description}\n{status}")


async def payment_check(update, context):
    query = update.pre_checkout_query
    if query.invoice_payload != "Custom-Payload":
        await query.answer(ok=False, error_message="‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    else:
        await query.answer(ok=True)



async def successful_payment(update, context):
    markup = ReplyKeyboardMarkup([['‚û°Ô∏è –î–∞–ª–µ–µ']], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text('ü•≥ –£—Ä–∞! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n'
                                    '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –î–∞–ª–µ–µ.', reply_markup=markup)


async def payment(update, context):
    text = update.message.text
    if text == '–°—Ç–æ–ø':
        await update.message.reply_text('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n'
                                        '–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.')
        return ConversationHandler.END
    elif text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = ReplyKeyboardMarkup([['üè™ –ë–æ—Ç-–º–∞–≥–∞–∑–∏–Ω', 'üñ• –ë–æ—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫'],
                                      ['üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫']],
                                     resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup
        )
        return 'choice'
    elif text == 'üëå –î–∞!':
        markup = ReplyKeyboardMarkup([['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
        await update.message.reply_text('üëç –û—Ç–ª–∏—á–Ω–æ!\n'
                                        '–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å –±–æ—Ç–∞, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ '
                                        '–∑–∞–¥–∞–Ω–∏–µ.', reply_markup=markup)
        chat_id = update.message.chat_id
        title = "–û–ø–ª–∞—Ç–∞ –±–æ—Ç–∞"
        description = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –±–æ—Ç–∞."
        payload = "Custom-Payload"
        currency = "rub"
        if context.user_data["variant"] == '–º–∞–≥–∞–∑–∏–Ω':
            price = 80000
        else:
            price = 50000
        prices = [LabeledPrice("Test", price)]
        await context.bot.send_invoice(chat_id, title, description, payload, SHOP_TOKEN, currency, prices)
        return 'asking_description'


async def asking_description(update, context):
    text = update.message.text
    if text == '‚û°Ô∏è –î–∞–ª–µ–µ':
        await update.message.reply_text('‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ –±–æ—Ç–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö:')
        return 'asking_file'
    elif text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = ReplyKeyboardMarkup([['üè™ –ë–æ—Ç-–º–∞–≥–∞–∑–∏–Ω', 'üñ• –ë–æ—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫'],
                                      ['üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫']], resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup
        )
        return 'choice'


async def asking_file(update, context):
    text = update.message.text
    if text == '–°—Ç–æ–ø':
        await update.message.reply_text('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n'
                                        '–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.')
        return ConversationHandler.END
    elif text:
        context.user_data["description"] = text
        await update.message.reply_text('üôå –û—Ç–ª–∏—á–Ω–æ!\n'
                                        '–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¢–ó (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ) '
                                        '–≤ –æ–¥–Ω–æ–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö: ".docx", ".doc", ".txt", '
                                        '".rtf", ".odt", ".pdf".\n'
                                        '–í –¢–ó –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∂–µ–ª–∞–ª–∏ –±—ã —É–≤–∏–¥–µ—Ç—å –≤ '
                                        '—Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –±–æ—Ç—É.')
        return 'getting_file'


async def getting_file(update, context):
    markup = ReplyKeyboardMarkup([['üè™ –ë–æ—Ç-–º–∞–≥–∞–∑–∏–Ω', 'üñ• –ë–æ—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫'], ['üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫']],
                                 resize_keyboard=True)
    user_id = update.message.chat_id
    file = await context.bot.get_file(update.message.document)
    file_format = file.file_path.split('/')[-1].split('.')[-1]
    if (file_format == 'doc' or file_format == 'docx' or file_format == 'txt' or file_format == 'rtf' or
            file_format == 'odt' or file_format == 'pdf') and file.file_size != 0:
        await file.download_to_drive(f"files/send_file.{file_format}")
    else:
        await update.message.reply_text('‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞')
    with open(f"files/send_file.{file_format}", 'rb') as file:
        tt_file = file.read()
    db_sess = db_session.create_session()
    try:
        info = Info(
            user_id=user_id,
            ad_data=tt_file,
            type=context.user_data["variant"],
            format=file_format,
            description=context.user_data["description"]
        )
        db_sess.add(info)
        db_sess.commit()
    except sqlalchemy.exc.IntegrityError:
        await update.message.reply_text('‚ÑπÔ∏è –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–∞–π–ª')

    work = db_sess.query(Info).order_by(Info.id.desc()).first()
    work_id = f"–ó–∞—è–≤–∫–∞ ‚Ññ{work.id}\n"
    user_id = f"id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {work.user_id}\n"
    data = work.ad_data
    description = f"–û–ø–∏—Å–∞–Ω–∏–µ: {work.description}\n"
    await context.bot.send_message(chat_id=5131259861, text=f"{work_id}{description}{user_id}")
    with open(f"files/file_{work.id}.{work.format}", 'wb') as ff:
        ff.write(data)
    f = open(f"files/file_{work.id}.{work.format}", 'rb')
    await context.bot.send_document(chat_id=5131259861, document=f)
    f.close()

    await update.message.reply_text('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!\n–ö–æ–≥–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤, '
                                    '–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–≥–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è.', reply_markup=markup)
    return 'choice'


async def show_all_works(update, context):
    text = update.message.text
    markup = ReplyKeyboardMarkup([['‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥']],
                                 resize_keyboard=True, one_time_keyboard=True)
    if text == 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏' or text == '‚òùÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ':
        db_sess = db_session.create_session()
        for work in db_sess.query(Info).all():
            work_id = f"–ó–∞—è–≤–∫–∞ ‚Ññ{work.id}\n"
            user_id = f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {work.user_id}\n"
            description = f"–û–ø–∏—Å–∞–Ω–∏–µ: {work.description}\n"
            status = f"–°—Ç–∞—Ç—É—Å: {work.status}\n"
            with open(f"files/file_{work.id}.{work.format}", 'wb') as ff:
                ff.write(work.ad_data)
            if text == '‚òùÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ':
                if work.status == '–í —Ä–∞–±–æ—Ç–µ':
                    await context.bot.send_message(chat_id=5131259861, text=f"{work_id}{description}"
                                                   f"{user_id}{status}",
                                                   reply_markup=markup)
                    f = open(f"files/file_{work.id}.{work.format}", 'rb')
                    await context.bot.send_document(chat_id=5131259861, document=f)
                    f.close()
            else:
                await context.bot.send_message(chat_id=5131259861, text=f"{work_id}{description}"
                                                                        f"{user_id}{status}",
                                               reply_markup=markup)
                f = open(f"files/file_{work.id}.{work.format}", 'rb')
                await context.bot.send_document(chat_id=5131259861, document=f)
                f.close()
        send_text = '‚¨áÔ∏è –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ'
        await context.bot.send_message(chat_id=5131259861, text=send_text)
        return 'send_bot_preparing'


async def send_bot_preparing(update, context):
    text = update.message.text
    markup = ReplyKeyboardMarkup([['üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏'], ['‚òùÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ']],
                                 resize_keyboard=True, one_time_keyboard=True)
    if text == "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é":
        await update.message.reply_text('‚ÑπÔ∏è –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, '
                                        '–≤–≤–µ–¥–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ –∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @<–∏–º—è –±–æ—Ç–∞>, <–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏>')
        return 'send_bot_finish'
    elif text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
        return 'show_all_works'


async def send_bot_finish(update, context):
    text = update.message.text
    markup = ReplyKeyboardMarkup([['üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏'], ['‚òùÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ']],
                                 resize_keyboard=True, one_time_keyboard=True)
    if text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
        return 'show_all_works'
    try:
        bot_name, id_ = update.message.text.split(', ')
        db_sess = db_session.create_session()
        work = db_sess.query(Info).get(int(id_))
        work.status = '–ì–æ—Ç–æ–≤–æ'
        user_id = work.user_id
        description = work.description
        db_sess.commit()
        await context.bot.send_message(chat_id=user_id, text=f"‚úÖ –í–∞—à –±–æ—Ç –≥–æ—Ç–æ–≤! (–∑–∞—è–≤–∫–∞ ‚Ññ{int(id_)})\n"
                                       f"{description}\n{bot_name}")
        await update.message.reply_text('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
    except Exception:
        await context.bot.send_message(text='‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç', chat_id=update.message.chat_id)


async def stop(update, context):

    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
                                    "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END


async def help(update, context):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: penkovmaks07@gmail.com"
    )


def main():
    db_session.global_init("db/tg_bot_db.sqlite")
    application = Application.builder().token("6718278003:AAEn1cxM9iKStowSOxMXekv4mrjpl_Dr3YA").build()
    application.add_handler(CommandHandler("help", help))
    application.add_handler(PreCheckoutQueryHandler(payment_check))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

    conv_handler_user = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            "choice": [MessageHandler(filters.TEXT & ~filters.COMMAND, choice)],
            "payment": [MessageHandler(filters.TEXT & ~filters.COMMAND, payment)],
            "asking_description": [MessageHandler(filters.TEXT & ~filters.COMMAND, asking_description)],
            "asking_file": [MessageHandler(filters.TEXT & ~filters.COMMAND, asking_file)],
            "getting_file": [MessageHandler(filters.Document.ALL & ~filters.COMMAND, getting_file)],

            "show_all_works": [MessageHandler(filters.TEXT & ~filters.COMMAND, show_all_works)],
            "send_bot_preparing": [MessageHandler(filters.TEXT & ~filters.COMMAND, send_bot_preparing)],
            "send_bot_finish": [MessageHandler(filters.TEXT & ~filters.COMMAND, send_bot_finish)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    application.add_handler(conv_handler_user)

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
